<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS DevSecOps Container Pipeline on AWS Container DevSecOps</title>
    <link>//localhost:1313/</link>
    <description>Recent content in AWS DevSecOps Container Pipeline on AWS Container DevSecOps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 15:08:20 -0400</lastBuildDate><atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Presenter</title>
      <link>//localhost:1313/intro/presenter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/intro/presenter/</guid>
      <description> Lead Solutions Architect @ Chainguard.dev AWS Ambassador O&amp;rsquo;Reilly Author - Networking and Kubernetes: A Layer Approach A Cloud Guru Instructor- Advanced Networking with Kubernetes on AWS Kubernetes Ingress NGINX Maintainer Kube Philly Organizer  </description>
    </item>
    
    <item>
      <title>Chainguard.dev</title>
      <link>//localhost:1313/intro/sponsor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/intro/sponsor/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CI/CD and Security</title>
      <link>//localhost:1313/intro/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/intro/intro/</guid>
      <description>CI/CD
 Maintain a code repository Automate the build Keep the build fast Make the build self-testing Commit early, commit often Every commit to the mainline gets built Everyone can see the results of the build Automate the deployment  Security
 Immutable artifacts CVE Scanning Least Privileged Network Isolation Run Time protection Signed Commits Signed Images  </description>
    </item>
    
    <item>
      <title>AWS Cloud9</title>
      <link>//localhost:1313/setup/cloud9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/setup/cloud9/</guid>
      <description>A list of supported browsers for AWS Cloud9 is found here.
  Log into your AWS Account  Everything defaults to us-west-2 in this Workshop
  Launch Cloud9 in us-west-2
Create a Cloud9 Environment: https://us-west-2.console.aws.amazon.com/cloud9/home?region=us-west-2
You&amp;rsquo;ll be prompted to log into your AWS Account in order to provision a Cloud9 Workspace
  Configure the Cloud9 instance  Review the setup before submitting for creation  Make sure to choose Amazon Linux 2, the tools install and other commands have been set up for Amazon Linux Only.</description>
    </item>
    
    <item>
      <title>Cloud 9 Settings Configuration</title>
      <link>//localhost:1313/setup/iam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/setup/iam/</guid>
      <description>Create IAM Role  Log into your AWS Account you are using for this workshop. Follow this link to create an IAM role with Administrator access. Confirm that AWS service and EC2 are selected, then click Next: Permissions to view permissions.  Confirm that AdministratorAccess is checked, then click Next: Tags to assign tags.  Take the defaults, and click Next: Review to review.  Enter devsecops-workshop-admin for the Name, and click Create role.</description>
    </item>
    
    <item>
      <title>Workshop tools</title>
      <link>//localhost:1313/setup/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/setup/tools/</guid>
      <description>In order for us to continue with the exercises, there are several tools that our needed to be installed on our Cloud9 instance.
Download these two repos with git
git clone https://github.com/strongjz/devsecopspipeline
git clone https://github.com/strongjz/aws-container-devsecops
Next will be installing the tools needed for the labs
The script will install
 docker kind terraform eksctl kubectl helm golang cosign  Install Navigate to where you downloaded the installation script from the git repo.</description>
    </item>
    
    <item>
      <title>Git Security</title>
      <link>//localhost:1313/development/git/</link>
      <pubDate>Tue, 17 Aug 2021 15:07:49 -0400</pubDate>
      
      <guid>//localhost:1313/development/git/</guid>
      <description>Code Reviews, Two-person reviewed Git Commit Signing MFA on accounts, GitHub, Gitlab etc.  Reading Material  Secret Leaks in Git PHP Git Hack  Git Commit Signing Exercise Needed:
 GPG Key GitHub Account  Generating a GPG Key  Generate a key with gpg gpg --passphrase &#39;&#39; --gen-key Select what key you want to use Fill out your name and your email address. Make sure this matches the one in your GitHub account.</description>
    </item>
    
    <item>
      <title>Linting</title>
      <link>//localhost:1313/development/linting/</link>
      <pubDate>Tue, 17 Aug 2021 15:07:57 -0400</pubDate>
      
      <guid>//localhost:1313/development/linting/</guid>
      <description>Linting is the process of analyzing code for syntax issues; it can aid in finding bugs and performance issues, offers simplifications, and enforces style rules.
Other notable uses for Linting:
 formatting discrepancy, go fmt. non-adherence to coding standards and conventions, shellchecker for example diagnosing possible logical errors in your applications. go vet Interpreted languages like Python, Ruby, and JavaScript benefit from linting, as these languages don’t have a compiling phase to display errors before execution.</description>
    </item>
    
    <item>
      <title>Open Web Application Security Project</title>
      <link>//localhost:1313/development/owasp/</link>
      <pubDate>Tue, 17 Aug 2021 15:07:57 -0400</pubDate>
      
      <guid>//localhost:1313/development/owasp/</guid>
      <description>The OWASP Top 10 is a standard awareness document for developers and web application security. It represents a broad consensus about the most critical security risks to web applications.
OWASP Top 10   A1:2017-Injection   Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.</description>
    </item>
    
    <item>
      <title>Pre Commit</title>
      <link>//localhost:1313/development/pre-commit/</link>
      <pubDate>Tue, 17 Aug 2021 15:08:20 -0400</pubDate>
      
      <guid>//localhost:1313/development/pre-commit/</guid>
      <description>Introduction The pre-commit hook is run first, before you even type in a commit message. It’s used to inspect the snapshot that’s about to be committed,
It can be used to detect
 missing semicolons trailing whitespace debug statements aws credentials private keys  Pre-commit is a framework for managing and maintaining multi-language pre-commit hooks.
https://github.com/pre-commit/pre-commit
 detect-aws-credentials - Checks for the existence of AWS secrets that you have set up with the AWS CLI.</description>
    </item>
    
    <item>
      <title>3 Musketeers</title>
      <link>//localhost:1313/development/3-musketeers/</link>
      <pubDate>Tue, 17 Aug 2021 15:08:14 -0400</pubDate>
      
      <guid>//localhost:1313/development/3-musketeers/</guid>
      <description>Tools used in the 3 Musketeers pattern:
 Make Docker Docker Compose  From https://3musketeers.io/
Consistency - Run the same commands no matter where you are: Linux, macOS, Windows, CI/CD tools that supports Docker like GitHub Actions, Travis CI, CircleCI, and GitLab CI.
Control - Take control of languages, versions, and tools you need, and version source control your pipelines with your preferred VCS like GitHub and GitLab.
Confidence - Test your code and pipelines locally before your CI/CD tool runs it.</description>
    </item>
    
    <item>
      <title>Secure Containers</title>
      <link>//localhost:1313/build/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/build/container/</guid>
      <description>Baseline  DISABLE ROOT Mount the container&amp;rsquo;s root filesystem as read-only set k8s Security context set Linux Capabilities Disable privilege escalation   securityContext:  allowPrivilegeEscalation: false  Least Privilege by defining user  apiVersion: v1 kind: Pod metadata:  name: pod-security spec:  securityContext:  runAsUser: 10000  runAsGroup: 30000  fsGroup: 20000   Network policies
  Workload configuration should be audited regularly, Kubesec
  Container Capabilities</description>
    </item>
    
    <item>
      <title>Secure Containers Exercise</title>
      <link>//localhost:1313/build/exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/build/exercise/</guid>
      <description>In this Exercise we are going to
 Run Application locally Run in Docker compose Go Reporter for static Analysis Go Sec for code cve scanning Secure Dockerfile  You may need to start docker
 sudo service docker start
Redirecting to /bin/systemctl start docker.service Navigate to DevSecops repo cd ~/environment/devsecopspipeline
Set a temp password for the local database
export DB_PASSWORD=temppassword
1. Run locally Run the Golang tests locally
make test</description>
    </item>
    
    <item>
      <title>Container Pipeline Exercise Overview</title>
      <link>//localhost:1313/pipeline/intro_exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/pipeline/intro_exercise/</guid>
      <description>AWS CI/CD We are going to deploy a pipeline with AWS Services
Static - Build our golang example applications, in a docker container and stores it in the AWS ECR
Build - Runs the Go Report Static Code analysis
Deploy - deploys the application via Code build, aws eks cli and kubectl</description>
    </item>
    
    <item>
      <title>Container Pipeline Exercise</title>
      <link>//localhost:1313/pipeline/exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/pipeline/exercise/</guid>
      <description>The AWS Resources for pipeline, etc are build using Terraform.
 Create the Terraform state bucket Initialize Terraform Plan Terraform Apply terraform  First Create the state file s3 bucket aws s3 mb s3://$NAME_S3_BUCKET --region us-west-2
make_bucket: $NAME_S3_BUCKET  Ensure the s3 bucket is updates and is unique.
 Inside our Terraform Directory in the devsecops repo cd ~/environments/devsecopspipeline/
Update the ~/environments/devsecopspipeline/terraform/config.tf with the bucket name to store terraform state</description>
    </item>
    
    <item>
      <title>Container Pipeline Exercise Part 2</title>
      <link>//localhost:1313/pipeline/exercise_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/pipeline/exercise_2/</guid>
      <description>Inside the devsecops repo cd ~/environments/devsecopspipeline/ we are going to manually push our application image to AWS ECR
AWS ECR Let&amp;rsquo;s push our docker image to ECR that was created from Terraform
make docker_push
  Expand me...   docker login -u AWS -p redacted https://123456789012.dkr.ecr.us-west-2.amazonaws.com WARNING! Using --password via the CLI is insecure. Use --password-stdin. WARNING! Your password will be stored unencrypted in /home/ec2-user/.docker/config.json. Configure a credential helper to remove this warning.</description>
    </item>
    
    <item>
      <title>Running Kubernetes</title>
      <link>//localhost:1313/run/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/run/kubernetes/</guid>
      <description>Cluster  Use IDP for Authorization Service Accounts for Workloads RBAC configured for users and workloads  Nodes  CIS/NIST benchmarks for Node Security Kubebench for Cluster  Network  All namespaces should have NetworkPolicy DO NOT EXPOSE your cluster to the Internet Differentiate between public and private workloads  Secrets  Secrets should be stored in third-party storage  HashiCorp Vault Conjur etcd in encrypted form.   Secrets should be added to the container using the volumeMount mechanism or the secretKeyRef mechanism.</description>
    </item>
    
    <item>
      <title>Running Containers Exercise</title>
      <link>//localhost:1313/run/exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/run/exercise/</guid>
      <description>Installing Prometheus to our cluster make helm_update
helm repo add stable https://charts.helm.sh/stable &amp;amp;&amp;amp; \ helm repo update &amp;#34;stable&amp;#34; has been added to your repositories Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the &amp;#34;stable&amp;#34; chart repository Update Complete. ⎈Happy Helming!⎈ make prom   Expand me...   helm repo add stable https://charts.helm.sh/stable &amp;amp;&amp;amp; \ helm repo update &amp;#34;stable&amp;#34; already exists with the same configuration, skipping Hang tight while we grab the latest from your chart repositories.</description>
    </item>
    
    <item>
      <title>Survey</title>
      <link>//localhost:1313/conclusion/survey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/conclusion/survey/</guid>
      <description>For a chance to win a copy of &amp;ldquo;Networking and Kubernetes: A Layered Approach&amp;rdquo; and to help improve this workshop please fill out this survey
or Link
https://docs.google.com/forms/d/e/1FAIpQLSeXNwl5M3enXJBAG988mNVFqyslzYqDgbKDgoDzOsJaR4hbLw/viewform</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>//localhost:1313/conclusion/clean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/conclusion/clean/</guid>
      <description>High Level Removal Steps  Delete Falco demo Delete Falco log group Delete Fluent bit deploy Remove Fluent bit iam Remove Application Terraform destroy Check/Remove for external AWS components Delete Cluster w/ eksctl Delete terraform s3 bucket Delete cloud9 instance  1. Delete Falco demo kubectl delete -f falco-demo/nodejs-bad-rest-api/falco-demo.yml
2. Delete Falco log group aws logs delete-log-group --log-group-name falco
3. Delete Fluent bit deploy kubectl delete -f fluent-bit/kubernetes/
4. Remove Fluent bit iam aws iam delete-policy --policy-arn arn:aws:iam::$ACCOUNT_ID:policy/EKS-CloudWatchLogs-devsecops</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>//localhost:1313/authors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/authors/</guid>
      <description>&amp;lt;div&amp;gt; &amp;lt;img src=&amp;quot;https://avatars.githubusercontent.com/u/2372917?v=4&amp;quot; class=&amp;quot;inline&amp;quot; width=&amp;quot;32&amp;quot; height=&amp;quot;32&amp;quot; style=&amp;quot;height: 32px;height: 32px;margin-bottom:.25em; vertical-align:middle; &amp;quot;&amp;gt; &amp;lt;label&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/strongjz&amp;quot;&amp;gt;@strongjz&amp;lt;/a&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;span class=&amp;quot;contributions&amp;quot;&amp;gt;91 commits&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt;  </description>
    </item>
    
  </channel>
</rss>
